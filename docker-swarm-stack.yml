# The docker stack deploy command uses the legacy Compose file version 3
# https://docs.docker.com/engine/swarm/stack-deploy/
# https://docs.docker.com/compose/intro/history/#docker-compose-cli-versioning
version: "3.8"

services:
  web:
    image: ghcr.io/aubgthehub/monolith-web:${GIT_COMMIT_HASH:-latest}
    # For Nginx, we are going to relly on the docker ingress network and routing mesh to send traffic to our nginx
    # instances. We are doing so in order to use a "start-first" update config. If we used `mode: host, and bypassed
    # the routing mesh, when we redeploy nginx we would get "port already in use", as this update config will try to
    # spin up a new instance before removing the old one (rolling release)
    # https://docs.docker.com/engine/swarm/networking/
    # https://docs.docker.com/engine/swarm/ingress/
    # https://docs.docker.com/reference/compose-file/services/#long-syntax-3
    ports:
      - mode: ingress
        protocol: tcp
        published: 80
        target: 80
      - mode: ingress
        protocol: tcp
        published: 443
        target: 443

    # https://docs.docker.com/reference/compose-file/deploy/#update_config
    deploy:
      update_config:
        order: start-first
      # TODO: add restart and rollback policies

    depends_on:
      - py-api

    volumes:
      # TODO: use named volumes when doing automatic certs renewal
      - /etc/letsencrypt:/etc/letsencrypt
      - /etc/nginx:/conf/basic-auth/nginx

#    networks:
#      - monolith_network

  py-api:
    image: ghcr.io/aubgthehub/monolith-backend:${GIT_COMMIT_HASH:-latest}

    deploy:
      update_config:
        order: start-first

      # For the py-api we don't publish ports as we don't want to use the routing mesh
      # This is because we already use it when a request comes to our website. Using it again would be inefficient due
      # to the overhead it creates, and the latency incurred. This is due to the IPVS standing in the middle. When using
      # dnsrr we essentially bypass is and directly referencing the container by its IP address.
      # https://forums.docker.com/t/routing-mesh-vip-slow-compared-to-dnsrr/69230
      # https://forums.docker.com/t/how-do-you-guys-deal-with-mesh-performance/139598
      # https://github.com/BretFisher/ama/discussions/160
      # https://forums.docker.com/t/docker-swarm-series-8th-publishing-modes/136972
      # https://docs.docker.com/engine/swarm/ingress/#without-the-routing-mesh
      endpoint_mode: dnsrr

      # We are using two replicas of the API to increase reliability
      # https://docs.docker.com/reference/compose-file/deploy/#replicas
      replicas: 2
      # TODO: add restart and rollback policies

    environment:
      # These stay constant for deployed environments
      ADDRESS: 0.0.0.0
      PORT: 8080

      # The values of the env variables are the paths where the decrypted secret is mounted into the container in an
      # in-memory filesystem.
      # IMPORTANT: Services should implement an app-level logic to read the decrypted values from those mounted files,
      # otherwise the values of these env variable will stay the mounted paths!
      # https://docs.docker.com/engine/swarm/secrets/#how-docker-manages-secrets
      DATABASE_URL: /run/secrets/db-url
      SECRET_KEY: /run/secrets/secret-key
      SECRET_AUTH_TOKEN: /run/secrets/secret-auth-key
      RESEND_API_KEY: /run/secrets/resend-api-key

    secrets:
      - db-url
      - secret-key
      - secret-auth-key
      - resend-api-key

    volumes:
      # Storing the logs like this is temporary solution until more sophisticated monitoring and observability system
      # is implemented.
      - /services/py-api/shared:/app/shared
      # TODO: Change paths when doing automatic certs renew
      - /etc/letsencrypt:/etc/letsencrypt

#    networks:
#      - monolith_network
secrets:
  # These docker secrets have already been set on the PROD and DEV VMs, that's why we use external: true.
  # To set a new secret key-value pair you may use: `prinf "toniMontanaSecret" | docker secret create toni -`
  db-url:
    external: true
  secret-key:
    external: true
  secret-auth-key:
    external: true
  resend-api-key:
    external: true

## Defining a custom overlay network would allow for service discovery as per:
## https://docs.docker.com/engine/swarm/networking/#configure-service-discovery
## This is because when not specifying a network
## https://docs.docker.com/engine/swarm/networking/#overlay-networking
#networks:
#  monolith_network:
#    driver: overlay
