from dataclasses import dataclass
from os import environ, cpu_count
from typing import Tuple

from structlog.stdlib import get_logger
from uvicorn import run

from src.database.db_manager import ping_db
from src.environment import DOMAIN, PORT
from src.server.logger.logger_factory import get_uvicorn_logger, configure_app_logger
from src.utils import SingletonMeta

# This should be done before calling LOG = get_logger(), which we use in almost
# every file, in order for the logger to function properly. Otherwise, it uses the default logging config.
configure_app_logger(environ["ENV"])

LOG = get_logger()


def _get_ssl_config() -> Tuple[str, str]:
    """Returns ssl_certfile, ssl_keyfile based on the ENV"""
    # TODO: these paths will definitely change depending on the web server we choose, disused in
    #  https://github.com/AUBGTheHUB/monolith/issues/737
    #  The paths are set according to the current DEV/PROD VMs

    letsencrypt_path = "/etc/letsencrypt/live"

    # The domain !="localhost" is needed as when simulating a DEV/PROD env locally we use (ENV=DEV && DOMAIN=localhost)
    # along with the self-signed certs. For DEV/PROD we use the certs generated by Letsencrypt via certbot.
    # On the DEV machine we expect those env vars to be ENV=DEV && DOMAIN=dev.thehub-aubg.com
    # On the PROD machine we expect those env vars to be ENV=PROD && DOMAIN=thehub-aubg.com
    if DOMAIN != "localhost":
        return f"{letsencrypt_path}/{DOMAIN}/fullchain.pem", f"{letsencrypt_path}/{DOMAIN}/privkey.pem"

    return "src/server/certs/localhost.crt", "src/server/certs/localhost.key"


@dataclass
class _ServerConfig(metaclass=SingletonMeta):
    ENV = environ["ENV"]
    ADDRESS = environ["ADDRESS"]
    SSL_CERT, SSL_KEY = _get_ssl_config()


def _load_server_config() -> "_ServerConfig":
    """Returns a Singleton Server Config"""
    return _ServerConfig()


def start() -> None:
    """Starts the Uvicorn server with different config based on the environment we are in"""
    server_config = _load_server_config()

    err = ping_db()
    if err:
        raise RuntimeError(err.err_value)

    if server_config.ENV == "LOCAL":
        LOG.debug("To open swagger/docs of the API visit: https://localhost:8080/api/v3/docs")

    run(
        app="src.server.app_entrypoint:app",
        host=server_config.ADDRESS,
        port=PORT,
        reload=server_config.ENV == "LOCAL",
        log_config=get_uvicorn_logger(server_config.ENV),
        ssl_certfile=server_config.SSL_CERT,
        ssl_keyfile=server_config.SSL_KEY,
        # https://docs.gunicorn.org/en/stable/design.html#how-many-workers
        # https://stackoverflow.com/questions/65278110/how-does-gunicorn-distribute-requests-across-sync-workers
        # As cpu_count could return None we use 0 instead, as 2 * None would produce an error
        # Also "workers" flag is ignored when reloading is enabled (It is ignored for LOCAL env)
        workers=2 * (cpu_count() or 0) + 1,
    )
